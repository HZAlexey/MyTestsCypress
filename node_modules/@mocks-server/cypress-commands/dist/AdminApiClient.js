"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminApiClient = void 0;
const admin_api_client_1 = require("@mocks-server/admin-api-client");
const admin_api_paths_1 = require("@mocks-server/admin-api-paths");
const helpers_1 = require("./helpers");
function doNothing() {
    return Promise.resolve();
}
class AdminApiClient {
    constructor(clientConfig) {
        Object.defineProperty(this, "_enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: true
        });
        Object.defineProperty(this, "_apiClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_port", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: admin_api_paths_1.DEFAULT_PORT
        });
        Object.defineProperty(this, "_host", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: admin_api_paths_1.DEFAULT_CLIENT_HOST
        });
        Object.defineProperty(this, "_protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: admin_api_paths_1.DEFAULT_PROTOCOL
        });
        this._apiClient = new admin_api_client_1.AdminApiClient();
        this.configClient(clientConfig);
    }
    _isDisabled() {
        return (0, helpers_1.isFalsy)(this._enabled);
    }
    updateConfig(mocksServerConfig) {
        if (this._isDisabled()) {
            return doNothing();
        }
        return this._apiClient.updateConfig(mocksServerConfig);
    }
    useRouteVariant(id) {
        if (this._isDisabled()) {
            return doNothing();
        }
        return this._apiClient.useRouteVariant(id);
    }
    restoreRouteVariants() {
        if (this._isDisabled()) {
            return doNothing();
        }
        return this._apiClient.restoreRouteVariants();
    }
    configClient(customConfig = {}) {
        if (!(0, helpers_1.isUndefined)(customConfig.enabled)) {
            this._enabled = customConfig.enabled;
        }
        if (!(0, helpers_1.isUndefined)(customConfig.host)) {
            this._host = customConfig.host;
        }
        if (!(0, helpers_1.isUndefined)(customConfig.port)) {
            this._port = customConfig.port;
        }
        if (!(0, helpers_1.isUndefined)(customConfig.https)) {
            this._protocol = customConfig.https ? admin_api_paths_1.HTTPS_PROTOCOL : admin_api_paths_1.DEFAULT_PROTOCOL;
        }
        this._apiClient.configClient({
            host: customConfig.host,
            port: customConfig.port,
            https: customConfig.https,
            agent: customConfig.agent,
        });
    }
    get url() {
        return `${this._protocol}://${this._host}:${this._port}`;
    }
}
exports.AdminApiClient = AdminApiClient;
