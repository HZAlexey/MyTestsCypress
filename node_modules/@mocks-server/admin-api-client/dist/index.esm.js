import crossFetch from 'cross-fetch';
import { ABOUT, CONFIG, ALERTS, COLLECTIONS, ROUTES, VARIANTS, CUSTOM_ROUTE_VARIANTS, DEFAULT_CLIENT_HOST, DEFAULT_PORT, DEFAULT_PROTOCOL, BASE_PATH, HTTPS_PROTOCOL } from '@mocks-server/admin-api-paths';

const JSON_HEADERS = {
    "Content-Type": "application/json",
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isUndefined(value) {
    return typeof value === "undefined";
}
function handleResponse(res) {
    if (res.status > 199 && res.status < 300) {
        return res.json().catch(() => Promise.resolve());
    }
    return res.json().then((data) => {
        return Promise.reject(new Error(data.message));
    });
}
class ApiClient {
    constructor() {
        Object.defineProperty(this, "_host", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: DEFAULT_CLIENT_HOST
        });
        Object.defineProperty(this, "_port", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: DEFAULT_PORT
        });
        Object.defineProperty(this, "_protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: DEFAULT_PROTOCOL
        });
        Object.defineProperty(this, "_agent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
    }
    get _baseUrl() {
        return `${this._protocol}://${this._host}:${this._port}${BASE_PATH}`;
    }
    _fullUrl(apiPath) {
        return `${this._baseUrl}${apiPath}`;
    }
    _addAgent(options = {}) {
        if (this._agent) {
            options.agent = this._agent;
        }
        return options;
    }
    config(configuration = {}) {
        if (!isUndefined(configuration.host)) {
            this._host = configuration.host;
        }
        if (!isUndefined(configuration.port)) {
            this._port = configuration.port;
        }
        if (!isUndefined(configuration.https)) {
            this._protocol = configuration.https ? HTTPS_PROTOCOL : DEFAULT_PROTOCOL;
        }
        if (!isUndefined(configuration.agent)) {
            this._agent = configuration.agent;
        }
    }
    read(apiPath) {
        return crossFetch(this._fullUrl(apiPath), this._addAgent()).then(handleResponse);
    }
    patch(apiPath, data) {
        return crossFetch(this._fullUrl(apiPath), this._addAgent({
            method: "PATCH",
            body: JSON.stringify(data),
            headers: JSON_HEADERS,
        })).then(handleResponse);
    }
    delete(apiPath) {
        return crossFetch(this._fullUrl(apiPath), this._addAgent({
            method: "DELETE",
        })).then(handleResponse);
    }
    create(apiPath, data) {
        return crossFetch(this._fullUrl(apiPath), this._addAgent({
            method: "POST",
            body: JSON.stringify(data),
            headers: JSON_HEADERS,
        })).then(handleResponse);
    }
}
class ApiResource {
    constructor(apiClient, apiPath, id) {
        Object.defineProperty(this, "_apiPath", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_apiClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._apiPath = apiPath;
        this._id = id ? `/${encodeURIComponent(id)}` : "";
        this._apiClient = apiClient;
    }
    get _fullApiPath() {
        return `${this._apiPath}${this._id}`;
    }
    read() {
        return this._apiClient.read(this._fullApiPath);
    }
    update(data) {
        return this._apiClient.patch(this._fullApiPath, data);
    }
    delete() {
        return this._apiClient.delete(this._fullApiPath);
    }
    create(data) {
        return this._apiClient.create(this._fullApiPath, data);
    }
}
class BaseAdminApiClient {
    constructor() {
        Object.defineProperty(this, "_apiClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_about", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_alerts", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_collections", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_routes", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_variants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_customRouteVariants", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._apiClient = new ApiClient();
        this._about = new ApiResource(this._apiClient, ABOUT);
        this._config = new ApiResource(this._apiClient, CONFIG);
        this._alerts = new ApiResource(this._apiClient, ALERTS);
        this._collections = new ApiResource(this._apiClient, COLLECTIONS);
        this._routes = new ApiResource(this._apiClient, ROUTES);
        this._variants = new ApiResource(this._apiClient, VARIANTS);
        this._customRouteVariants = new ApiResource(this._apiClient, CUSTOM_ROUTE_VARIANTS);
    }
    get about() {
        return this._about;
    }
    get config() {
        return this._config;
    }
    get alerts() {
        return this._alerts;
    }
    alert(id) {
        return new ApiResource(this._apiClient, ALERTS, id);
    }
    get collections() {
        return this._collections;
    }
    collection(id) {
        return new ApiResource(this._apiClient, COLLECTIONS, id);
    }
    get routes() {
        return this._routes;
    }
    route(id) {
        return new ApiResource(this._apiClient, ROUTES, id);
    }
    get variants() {
        return this._variants;
    }
    variant(id) {
        return new ApiResource(this._apiClient, VARIANTS, id);
    }
    get customRouteVariants() {
        return this._customRouteVariants;
    }
    configClient(configuration) {
        this._apiClient.config(configuration);
    }
}

class AdminApiClient {
    constructor() {
        Object.defineProperty(this, "_adminApiClient", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this._adminApiClient = new BaseAdminApiClient();
    }
    readAbout() {
        return this._adminApiClient.about.read();
    }
    readConfig() {
        return this._adminApiClient.config.read();
    }
    updateConfig(newConfig) {
        return this._adminApiClient.config.update(newConfig);
    }
    readAlerts() {
        return this._adminApiClient.alerts.read();
    }
    readAlert(id) {
        return this._adminApiClient.alert(id).read();
    }
    readCollections() {
        return this._adminApiClient.collections.read();
    }
    readCollection(id) {
        return this._adminApiClient.collection(id).read();
    }
    readRoutes() {
        return this._adminApiClient.routes.read();
    }
    readRoute(id) {
        return this._adminApiClient.route(id).read();
    }
    readVariants() {
        return this._adminApiClient.variants.read();
    }
    readVariant(id) {
        return this._adminApiClient.variant(id).read();
    }
    readCustomRouteVariants() {
        return this._adminApiClient.customRouteVariants.read();
    }
    useRouteVariant(id) {
        return this._adminApiClient.customRouteVariants.create({
            id,
        });
    }
    restoreRouteVariants() {
        return this._adminApiClient.customRouteVariants.delete();
    }
    configClient(config) {
        return this._adminApiClient.configClient(config);
    }
}

export { AdminApiClient };
