import type { AnyObject, ApiClientConfig, Url, ApiPath, Id } from "./types";
declare class ApiClient {
    private _host;
    private _port;
    private _protocol;
    private _agent?;
    get _baseUrl(): Url;
    private _fullUrl;
    private _addAgent;
    config(configuration?: ApiClientConfig): void;
    read(apiPath: ApiPath): Promise<any>;
    patch(apiPath: ApiPath, data: AnyObject): Promise<any>;
    delete(apiPath: ApiPath): Promise<any>;
    create(apiPath: ApiPath, data: AnyObject): Promise<any>;
}
declare class ApiResource {
    private _apiPath;
    private _id;
    private _apiClient;
    constructor(apiClient: ApiClient, apiPath: ApiPath, id?: Id);
    private get _fullApiPath();
    read(): Promise<any>;
    update(data: AnyObject): Promise<any>;
    delete(): Promise<any>;
    create(data: AnyObject): Promise<any>;
}
export declare class BaseAdminApiClient {
    private _apiClient;
    private _about;
    private _config;
    private _alerts;
    private _collections;
    private _routes;
    private _variants;
    private _customRouteVariants;
    constructor();
    get about(): ApiResource;
    get config(): ApiResource;
    get alerts(): ApiResource;
    alert(id: Id): ApiResource;
    get collections(): ApiResource;
    collection(id: Id): ApiResource;
    get routes(): ApiResource;
    route(id: Id): ApiResource;
    get variants(): ApiResource;
    variant(id: Id): ApiResource;
    get customRouteVariants(): ApiResource;
    configClient(configuration: ApiClientConfig): void;
}
export {};
