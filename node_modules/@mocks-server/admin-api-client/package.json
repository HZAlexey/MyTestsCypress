{
  "name": "@mocks-server/admin-api-client",
  "version": "7.0.0",
  "description": "Client of @mocks-server/plugin-admin-api",
  "keywords": [
    "mocks-server",
    "plugin",
    "administration",
    "admin",
    "api",
    "rest",
    "client"
  ],
  "author": "Javier Brea",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/mocks-server/main.git",
    "directory": "packages/admin-api-client"
  },
  "homepage": "https://www.mocks-server.org",
  "publishConfig": {
    "access": "public"
  },
  "files": [
    "dist",
    "dist-tsc"
  ],
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist-tsc/index.d.ts",
  "dependencies": {
    "@mocks-server/admin-api-paths": "5.0.0",
    "cross-fetch": "3.1.5"
  },
  "engines": {
    "node": ">=14.0.0"
  },
  "scripts": {
    "build": "tsc && rollup --config",
    "mocks:ci": "pnpm -w run nx start admin-api-client-unit-mocks",
    "test": "jest --runInBand",
    "test:unit": "start-server-and-test mocks:ci tcp:127.0.0.1:3110 test"
  },
  "readme": "<p align=\"center\"><a href=\"https://mocks-server.org\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"120\" src=\"https://www.mocks-server.org/img/logo_120.png\" alt=\"Mocks Server logo\"></a></p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/mocks-server/main/actions?query=workflow%3Abuild+branch%3Amaster\"><img src=\"https://github.com/mocks-server/main/workflows/build/badge.svg?branch=master\" alt=\"Build Status\"></a>\n  <a href=\"https://codecov.io/gh/mocks-server/main\"><img src=\"https://codecov.io/gh/mocks-server/main/branch/master/graph/badge.svg?token=2S8ZR55AJV\" alt=\"Coverage\"></a>\n  <a href=\"https://sonarcloud.io/project/overview?id=mocks-server_main_admin-api-client\"><img src=\"https://sonarcloud.io/api/project_badges/measure?project=mocks-server_main_admin-api-client&metric=alert_status\" alt=\"Quality Gate\"></a>\n  <a href=\"https://www.npmjs.com/package/@mocks-server/admin-api-client\"><img src=\"https://img.shields.io/npm/dm/@mocks-server/admin-api-client.svg\" alt=\"Downloads\"></a>\n  <a href=\"https://renovatebot.com\"><img src=\"https://img.shields.io/badge/renovate-enabled-brightgreen.svg\" alt=\"Renovate\"></a>\n  <a href=\"https://github.com/mocks-server/main/blob/master/packages/admin-api-client/LICENSE\"><img src=\"https://img.shields.io/npm/l/@mocks-server/admin-api-client.svg\" alt=\"License\"></a>\n</p>\n\n---\n\n# Mocks-server administration api client\n\nThis package provides an API client for administrating Mocks Server through HTTP requests to the [Admin API plugin][plugin-admin-api-url].\n\nRequests to the Mocks Server administration API are made using [`cross-fetch`](https://www.npmjs.com/package/cross-fetch), which makes this package compatible with browsers and Node.js environments, but, if you are going to build a browser application, you'll probably prefer to use the [`@mocks-server/admin-api-client-data-provider` package](https://www.npmjs.com/package/@mocks-server/admin-api-client-data-provider), which uses [Data Provider](https://www.data-provider.org), and works well with Redux, React, etc.\n\n## Installation\n\n```bash\nnpm install --save @mocks-server/admin-api-client\n```\n\nThe UMD build is also available on unpkg. When UMD package is loaded, it creates a `mocksServerAdminApiClient` global object containing all methods and classes.\n\n```html\n<script src=\"https://unpkg.com/@mocks-server/admin-api-paths/dist/index.umd.js\"></script>\n<script src=\"https://unpkg.com/@mocks-server/admin-api-client/dist/index.umd.js\"></script>\n```\n\n> NOTE: The umd distribution is bundled with the `cross-fetch` dependency, but it requires the `@mocks-server/admin-api-paths` dependency to be added separately.\n\n## Usage\n\nImport and create a new `AdminApiClient` class. All methods described in the [Api](#api) return Promises when executed (except the `configClient` method):\n\n```js\nimport { AdminApiClient } from \"@mocks-server/admin-api-client\";\n\nconst example = async () => {\n  const adminApiClient = new AdminApiClient();\n\n  const { version } = await adminApiClient.readAbout();\n  console.log(`Current Admin API plugin version is ${versions.adminApi}`);\n\n  const currentConfig = await adminApiClient.readConfig();\n  console.log(\"Current Mocks Server config is\", JSON.stringify(currentConfig));\n\n  await adminApiClient.updateConfig({\n    mock: {\n      collections: {\n        selected: \"user-super-admin\"\n      },\n      routes: {\n        delay: 1000\n      },\n    },\n  });\n  console.log(\"Collection and delay changed\");\n};\n\nexample();\n```\n\n## Api\n\n### new AdminApiClient()\n\nReturns an instance containing next methods:\n\n* `readAbout()` - Returns info about the Admin API plugin, such as current version.\n* `readConfig()` - Returns current configuration.\n* `updateConfig(configObject)` - Updates Mocks Server configuration. A configuration object has to be provided. Read the [Mocks Server configuration docs](https://www.mocks-server.org/docs/configuration/options) for further info.\n* `readAlerts()` - Returns array of current alerts.\n* `readAlert(alertId)` - Returns an specific alert.\n* `readCollections()` - Returns available collections.\n* `readCollection(id)` - Returns a collection by ID.\n* `readRoutes()` - Returns available routes.\n* `readRoute(id)` - Returns a route by ID.\n* `readVariants()` - Returns available route variants.\n* `readVariant(id)` - Returns a route variant by ID.\n* `readCustomRouteVariants()` - Returns current custom route variants of the current collection.\n* `useRouteVariant(id)` - Sets a custom route variant to be used by current collection.\n* `restoreRouteVariants()` - Restore route variants to those defined in current collection.\n* `configClient(clientConfig)` - Changes the client configuration.\n  * `clientConfig` _`<Object>`_ - It should be an object containing any of next properties:\n    * `port` - _`<Number>`_ - Changes the client port. Default is `3110`.\n    * `host` - _`<String>`_ - Changes the client host. Default is `127.0.0.1`.\n    * `https` - _`<Boolean>`_ - If `true`, changes the client protocol to \"https\". Default is `false`.\n    * `agent` - _`<http.Agent | https.Agent>`_ - A custom agent can be provided. This is useful in Node.js environments in order to make able to request to https APIs with self-signed certificates ([see example below](#requesting-to-apis-with-https-enabled-and-self-signed-certificate)).\n\n## Configuration\n\nBy default, clients are configured to request to `http://127.0.0.1:3110/api`, based in the [default options of Mocks Server Plugin Admin API](https://www.mocks-server.org/docs/configuration/options)\n\nYou can change the host, port and protocol of the administration API using the `configClient` method:\n\n```js\nimport { AdminApiClient } from \"@mocks-server/admin-api-client\";\n\nconst apiClient = new AdminApiClient();\napiClient.configClient({\n  host: \"localhost\",\n  port: 3500,\n  https: true,\n});\n```\n\n### Requesting to APIs with https enabled and self-signed certificate\n\nWhen the administration API is started with https enabled using a self-signed certificate, and the client is used in Node.js, a custom agent can be provided in order to avoid unauthorized rejections:\n\n```js\nimport https from \"https\";\nimport { AdminApiClient } from \"@mocks-server/admin-api-client\";\n\nconst httpsAgent = new https.Agent({\n  rejectUnauthorized: false,\n});\n\nconst apiClient = new AdminApiClient();\napiClient.configClient({\n  host: \"localhost\",\n  port: 3500,\n  https: true,\n  agent: httpsAgent\n});\n```\n\n## Contributing\n\nContributors are welcome.\nPlease read the [contributing guidelines](.github/CONTRIBUTING.md) and [code of conduct](.github/CODE_OF_CONDUCT.md).\n\n[plugin-admin-api-url]: https://github.com/mocks-server/main/blob/master/packages/admin-api-client\n"
}